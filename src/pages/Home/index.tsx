import React from 'react';
import { useSelector } from 'react-redux';
import { useSearchParams } from 'react-router-dom';

import Categories from '../../components/Categories';
import GameBlock from '../../components/GameBlock';
import Skeleton from '../../components/GameBlock/Skeleton';
import Pagination from '../../components/Pagination';
import Sort, { sortList } from '../../components/Sort';
import { setCurrentCategory, setCurrentFilters, setCurrentPage } from '../../redux/filter/slice';
import { fetchGames } from '../../redux/game/asyncActions';
import { Status } from '../../redux/game/types';
import { RootState, useAppDispatch } from '../../redux/store';

import styles from './Home.module.scss';

const Home: React.FC = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const dispatch = useAppDispatch();
  const isMounted = React.useRef(false);

  const { items, count, status } = useSelector((state: RootState) => state.game);
  const { currentCategory, searchValue, currentPage, sort } = useSelector(
    (state: RootState) => state.filter,
  );

  const onChangeCategory = (category: string) => {
    dispatch(setCurrentCategory(category));
  };

  const onChangePage = (page: number) => {
    dispatch(setCurrentPage(page));
  };

  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ redux
  React.useEffect(() => {
    const sort = sortList.find((item) => item.sortProperty === searchParams.get('sortBy'));

    if (searchParams.get('currentPage')) {
      dispatch(
        setCurrentFilters({
          currentPage: Number(searchParams.get('currentPage')) || 1,
          currentCategory: searchParams.get('currentCategory') || '–í—Å–µ',
          sort: sort || sortList[2],
          searchValue: searchParams.get('search') || '',
        }),
      );
    }
  }, []);

  //–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–≥—Ä—ã
  React.useEffect(() => {
    window.scrollTo(0, 0);

    const category = currentCategory !== '–í—Å–µ' ? `&filter=${currentCategory}` : '';
    const search = searchValue ? `&title=${searchValue}` : '';
    const sortBy = sort.sortProperty.replace('-', '');
    const order = sort.sortProperty.includes('-') ? 'asc' : 'desc';

    dispatch(fetchGames({ category, search, currentPage, sortBy, order }));
  }, [currentCategory, searchValue, currentPage, sort.sortProperty]);

  //–ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
  React.useEffect(() => {
    if (isMounted.current) {
      setSearchParams(
        `currentPage=${currentPage}&currentCategory=${currentCategory}&sortBy=${sort.sortProperty}`,
      );
    }

    isMounted.current = true;
  }, [currentPage, currentCategory, sort.sortProperty]);

  const games = items.map((item) => <GameBlock key={item.id} {...item} />);
  const skeletons = [...new Array(6)].map((_, index) => <Skeleton key={index} />);

  return (
    <div className={styles.root}>
      <div className={styles.upper}>
        <Categories currentCategory={currentCategory} onChangeCategory={onChangeCategory} />
        <Sort sortName={sort.name} />
      </div>

      {status === Status.ERROR ? (
        <div className={styles.errorInfo}>
          <h2>
            –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ <span>üòï</span>
          </h2>
          <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.</p>
        </div>
      ) : (
        <div className={styles.content}>{status === Status.LOADING ? skeletons : games}</div>
      )}
      {count === 0 && <>–ù–∞–π–¥–µ–Ω–æ: 0 –∏–≥—Ä</>}

      <Pagination itemCount={count} currentPage={currentPage} onChangePage={onChangePage} />
    </div>
  );
};

export default Home;
